
import cv2
from PIL import Image
import numpy

# TODO Finne ut hvordan man endrer parameter i HOGDescriptor

class NeuralNet():

    def __init__(self):
        # Initierer HoG variabler.
        self.HOGde = cv2.HOGDescriptorcv2.HOGDescriptor()


    def ImportTrening(self,antallPos,antallNeg):
        # Maksimum treningsdata er 687 positive og 836 negative. Utforer HoG og samler i matriser
        # Treningsdata har default vindusstorrelse paa bilder: 32x24.
        # Anvender HoG blokkstorrelse paa 4x4 og cellestorrelse 8x6.
        # Tilsvarer 144 features per bilde

        # Lager tomme matriser
        self.posTrening = numpy.zeros((144,antallPos))
        self.negTrening = numpy.zeros((144,antallNeg))

        # Bildesti til treningsdata
        self.sti = "C:\Users\Vegard\Documents\Python\Ansikt_Database"

        for pos in range(1,antallPos):
            # Laster inn bilder med fjes og utforer HoG
            bildeNavnPos = "\PosTrening (" + str(pos) + ").jpg"
            bildeSti = str(self.sti+""+bildeNavnPos)
            bildePos = Image.open(bildeSti)
            bildePosSkalert = bildePos.resize((24, 32), Image.ANTIALIAS)
            bildePosMat = numpy.asarray(bildePosSkalert)
            self.posTrening = self.HOGde.compute(bildePosMat, winStride=(24,32),padding=(0, 0))



        for neg in range(1,antallNeg):
            # Laster inn bilder uten fjes og utforer HoG
            bildeNavnNeg = "\NegTrening (" + str(neg) + ").jpg"
            bildeSti = str(self.sti+""+bildeNavnNeg)
            bildeNeg = Image.open(bildeSti)
            bildeNegSkalert = bildeNeg.resize((24, 32), Image.ANTIALIAS)
            bildeNegMat = numpy.asarray(bildeNegSkalert)
            self.negTrening = self.HOGde.compute(bildeNegMat, winStride=(24,32), padding=(0, 0))


        return self.posTrening


program = NeuralNet
matrise = program().ImportTrening(100,100)

print(matrise)

